// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: daec/daec.proto

package daecv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrchServiceClient is the client API for OrchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrchServiceClient interface {
	Task(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	Result(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*ResultResponse, error)
}

type orchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrchServiceClient(cc grpc.ClientConnInterface) OrchServiceClient {
	return &orchServiceClient{cc}
}

func (c *orchServiceClient) Task(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, "/orch.OrchService/Task", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchServiceClient) Result(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/orch.OrchService/Result", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrchServiceServer is the server API for OrchService service.
// All implementations must embed UnimplementedOrchServiceServer
// for forward compatibility
type OrchServiceServer interface {
	Task(context.Context, *TaskRequest) (*TaskResponse, error)
	Result(context.Context, *ResultRequest) (*ResultResponse, error)
	mustEmbedUnimplementedOrchServiceServer()
}

// UnimplementedOrchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrchServiceServer struct {
}

func (UnimplementedOrchServiceServer) Task(context.Context, *TaskRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Task not implemented")
}
func (UnimplementedOrchServiceServer) Result(context.Context, *ResultRequest) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Result not implemented")
}
func (UnimplementedOrchServiceServer) mustEmbedUnimplementedOrchServiceServer() {}

// UnsafeOrchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrchServiceServer will
// result in compilation errors.
type UnsafeOrchServiceServer interface {
	mustEmbedUnimplementedOrchServiceServer()
}

func RegisterOrchServiceServer(s grpc.ServiceRegistrar, srv OrchServiceServer) {
	s.RegisterService(&OrchService_ServiceDesc, srv)
}

func _OrchService_Task_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchServiceServer).Task(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orch.OrchService/Task",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchServiceServer).Task(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchService_Result_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchServiceServer).Result(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orch.OrchService/Result",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchServiceServer).Result(ctx, req.(*ResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrchService_ServiceDesc is the grpc.ServiceDesc for OrchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orch.OrchService",
	HandlerType: (*OrchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Task",
			Handler:    _OrchService_Task_Handler,
		},
		{
			MethodName: "Result",
			Handler:    _OrchService_Result_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "daec/daec.proto",
}
